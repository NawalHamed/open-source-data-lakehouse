version: "3.8"

services:
  minio:
    #image: minio/minio
    #image: quay.io/minio/minio:latest
    #image: minio/minio:RELEASE.2023-08-04T19-57-37Z
    image: minio/minio:RELEASE.2023-09-04T19-57-37Z
    container_name: minio_v
    command: server --address ":9009" /data --console-address ":9001"
    ports:
      - "9009:9009"
      - "9102:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      VIRTUAL_HOST: minio.rihal.dev
      VIRTUAL_PORT: 9001
      MINIO_STORAGE_MINFREE: 100Mi
    volumes:
      - minio_data:/data
    networks:
      - shared-network
    restart: always

  nessie:
    #image: projectnessie/nessie:latest
    image: projectnessie/nessie:0.69.2
    container_name: nessie
    depends_on:
      - postgres
    environment:
      QUARKUS_HTTP_PORT: 19120
      VIRTUAL_HOST: nessie.rihal.dev
      VIRTUAL_PORT: 19120
      #nessie.version.store.type: rocksdb
      #nessie.version.store.persist: "true"
      QUARKUS_DATASOURCE_JDBC_URL: "jdbc:postgresql://postgres_v:5432/airflow" # Using existing airflow DB
      QUARKUS_DATASOURCE_USERNAME: airflow
      QUARKUS_DATASOURCE_PASSWORD: airflow
      QUARKUS_HIBERNATE_ORM_DATABASE_GENERATION: update
      nessie.version.store.type: jdbc
    volumes:
      - nessie_data:/mnt/nessie
      #- ./nessie-data:/var/lib/nessie
    networks:
      - shared-network
    restart: always

  postgres:
    image: postgres:13
    container_name: postgres_v
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports:
      - "5490:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - shared-network
    restart: always

  spark-master:
    build: ./spark
    container_name: spark-master
    depends_on:
      - minio
      - nessie
    ports:
      - "8888:8888"
      - "4040:4040"
      - "7077:7077"
      - "8082:8080"
    environment:
      SPARK_MODE: master
      SPARK_MASTER_PORT: 7077
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      AWS_S3_ENDPOINT: http://minio_v:9009
      NESSIE_URI: http://nessie:19120/api/v2
      WAREHOUSE: /warehouse
      VIRTUAL_HOST: spark.rihal.dev
      VIRTUAL_PORT: 8080
    volumes:
      - ./spark/conf:/home/spark/notebooks
      - ./spark/jobs:/opt/spark_jobs:rw
    working_dir: /home/spark/notebooks
    command: >
      bash -c "
        pip install great_expectations[pyspark] &&
        /opt/bitnami/spark/sbin/start-master.sh &
        jupyter notebook --ip=0.0.0.0 --port=8888 --allow-root --NotebookApp.token='' --NotebookApp.password=''
      "
    networks:
      - shared-network
    restart: always

  spark-worker-1:
    build: ./spark
    container_name: spark-worker-1
    depends_on:
      - spark-master
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark-master:7077
      SPARK_WORKER_CORES: 2
      SPARK_WORKER_MEMORY: 2g
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
    volumes:
      - ./spark/jobs:/opt/spark_jobs:rw
    networks:
      - shared-network
    restart: always

  spark-worker-2:
    build: ./spark
    container_name: spark-worker-2
    depends_on:
      - spark-master
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark-master:7077
      SPARK_WORKER_CORES: 2
      SPARK_WORKER_MEMORY: 2g
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
    volumes:
      - ./spark/jobs:/opt/spark_jobs:rw
    networks:
      - shared-network
    restart: always

  airflow:
    # build:
    #   context: ./airflow
    #   dockerfile: Dockerfile
    image: open-source-data-lakehouse-airflow:latest
    container_name: airflow
    depends_on:
      - spark-master
      - minio
      - postgres
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__FERNET_KEY=wpkcTm8qVuIjMKZpsvUM_wm1EB_hzgRZb7v1wQCeuCI=
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres_v:5432/airflow
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
      - AWS_S3_ENDPOINT=http://minio_v:9009
      - NESSIE_URI=http://nessie:19120/api/v2
      - WAREHOUSE=warehouse
      - VIRTUAL_HOST=airflow.rihal.dev
      - VIRTUAL_PORT=8080
    user: root
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./spark/jobs:/opt/spark_jobs
      - /var/run/docker.sock:/var/run/docker.sock
    command: >
      bash -c "
        airflow db init &&
        airflow db migrate &&
        airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin &&
        airflow webserver & airflow scheduler
      "
    networks:
      - shared-network
    restart: always

  superset:
    image: apache/superset:latest
    container_name: superset
    environment:
      - SUPERSET_SECRET_KEY=your-secret-key-change-this
      - SUPERSET_LOAD_EXAMPLES=no
      - SUPERSET_DATABASE_HOST=postgres_v
      - SUPERSET_DATABASE_USER=airflow
      - SUPERSET_DATABASE_PASSWORD=airflow
      - SUPERSET_DATABASE_DB=airflow
      - VIRTUAL_HOST=superset.rihal.dev
      - VIRTUAL_PORT=8088
    depends_on:
      - postgres
      - minio
    volumes:
      - superset_data:/app/superset_home
    command: >
      bash -c "
        pip install trino[sqlalchemy] &&
        superset db upgrade &&
        superset fab create-admin --username admin --firstname Superset --lastname Admin --email admin@superset.com --password admin &&
        superset init &&
        superset run -h 0.0.0.0 -p 8088 --with-threads --reload --debugger
      "
    networks:
      - shared-network
    restart: always

  trino:
    image: trinodb/trino:latest
    #image: projectnessie/trino:latest
    container_name: trino
    depends_on:
      - minio
      - nessie
    ports:
      - "8084:8080"
    volumes:
      - ./trino/catalog:/etc/trino/catalog
      - ./trino/config.properties:/etc/trino/config.properties
    environment:
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
      - S3_ENDPOINT=http://minio:9009
      - S3_PATH_STYLE=true
      - VIRTUAL_HOST=trino.rihal.dev
      - VIRTUAL_PORT=8080
    networks:
      - shared-network
    restart: always

  cloudbeaver: #username: admin123 password:Admin@123
    container_name: cdlakehouse
    image: dbeaver/cloudbeaver:latest
    restart: always
    environment:
      CLOUDBEAVER_RESOURCE_QUOTA_DATA_EXPORT_FILE_SIZE_LIMIT: 1000000000
      VIRTUAL_HOST: cdlakehouse.rihal.dev
      VIRTUAL_PORT: 8978
    volumes:
      - cloudbeaver-config:/opt/cloudbeaver/workspace
    networks:
      - shared-network
  
    

volumes:
  postgres_data:
  minio_data:
  superset_data:
  cloudbeaver-config:
  nessie_data:
  openmetadata_data:


networks:
  shared-network:
    external: true
